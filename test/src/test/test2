if(StringUtils.isBlank(pns[j])){
				//haha1
				if(StringUtils.isNotBlank(card_nos[j])){
					if(!validatorFasion(validator_card_no, card_nos[j])){
						param.put("error", "��"+ line + "�У�sim���Ÿ�ʽ����ȷ" );
						return param;
					}
					k = arrayValidator(card_nos, card_nos[j],j);
					if(k != -1){
						param.put("error", "��"+ line + "�еĿ������"+ (k+2) +"���ظ�" );
						return param;
					}
				}
				
				//imsiУ��
				if(StringUtils.isNotBlank(imsis[j])){
					if(!validatorFasion(validator_imsi, imsis[j])){
						param.put("error", "��"+ line + "�У�sim����imsis��ʽ����ȷ" );
						return param;
					}
					k = arrayValidator(imsis, imsis[j],j);
					if(k != -1){
						param.put("error", "��"+ line + "�е�imsi�����"+ (k+2) +"���ظ�" );
						return param;
					}
				}
				//iccidУ��
				if(StringUtils.isNotBlank(iccids[j])){
					if(iccids[j].length() != 20){
						param.put("error", "��"+ line + "�У�sim��iccid��ʽ����ȷ" );
						return param;
					}
					k = arrayValidator(iccids, iccids[j],j);
					if(k != -1){
						param.put("error", "��"+ line + "�е�iccid�����"+ (k+2) +"���ظ�" );
						return param;
					}
				}
				
				
			}else{
				//PN��Ϊ�գ��򱣴�������Ʒ������ȫ�������ʽУ��
			    if(StringUtils.isBlank(card_nos[j])){
			    	param.put("error", "��"+ line + "�У�sim����Ϊ��" );
					return param;
			    }else if(!validatorFasion(validator_card_no, card_nos[j])){
			    	param.put("error", "��"+ line + "�У�sim�� ���� ��ʽ����" );
					return param;
			    }
		    	k = arrayValidator(card_nos, card_nos[j],j);
				if(k != -1){
					param.put("error", "��"+ line + "�еĿ������"+ (k+2) +"���ظ�" );
					return param;
				}
				
			    if(StringUtils.isBlank(imsis[j])){
			    	param.put("error", "��"+ line + "�У�sim���� imsi Ϊ��" );
					return param;
			    }else if(!validatorFasion(validator_imsi, imsis[j])){
			    	param.put("error", "��"+ line + "�У�sim�� imsi ��ʽ����" );
					return param;
			    }
		    	k = arrayValidator(imsis, imsis[j],j);
				if(k != -1){
					param.put("error", "��"+ line + "�е�imsi�����"+ (k+2) +"���ظ�" );
					return param;
				}
			    
			    if(StringUtils.isBlank(iccids[j])){
			    	param.put("error", "��"+ line + "�У�sim����iccidΪ��" );
					return param;
			    }else if(iccids[j].length() != 20){
			    	param.put("error", "��"+ line + "�У�sim�� iccid ��ʽ����" );
					return param;
			    }
		    	k = arrayValidator(iccids, iccids[j],j);
				if(k != -1){
					param.put("error", "��"+ line + "�е�iccid�����"+ (k+2) +"���ظ�" );
					return param;
				}
			}
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			//���ݿ� ���� Ψһ�Լ��
		for (int j = 0; j<rows; j++ ){
			int line = j + 2;  //��������
			if(StringUtils.isBlank(pns[j])){
				//����У��
				if(StringUtils.isNotBlank(card_nos[j])){
					cs = cardSimDao.findUniqueBy("cardNo", card_nos[j]);
					if(null != cs){
						date = DateUtil.formatDate(cs.getCreatedDate(), "yyyy-MM-dd HH:mm:ss");
						param.put("error", "��"+ line + "�У�sim���Ŀ���: "+ card_nos[j] +" �� "+ date +" ����⣬���ʵ��" );
						return param;
					}
				}
				//imsiУ��
				if(StringUtils.isNotBlank(imsis[j])){
					
					cs = cardSimDao.findUniqueBy("imsi", imsis[j]);
					if(null != cs){
						date = DateUtil.formatDate(cs.getCreatedDate(), "yyyy-MM-dd HH:mm:ss");
						param.put("error", "��"+ line + "�У�sim����IMSI: "+ imsis[j] +" �� "+ date +" ����⣬���ʵ��" );
						return param;
					}
				}
				
				//iccidУ��
				if(StringUtils.isNotBlank(iccids[j])){
					cs = cardSimDao.findUniqueBy("iccid", iccids[j]);
					if(null != cs){
						date = DateUtil.formatDate(cs.getCreatedDate(), "yyyy-MM-dd HH:mm:ss");
						param.put("error", "��"+ line + "�У�sim����iccid: "+ iccids[j] +" �� "+ date +" ����⣬���ʵ��" );
						return param;
					}
				}
			}else{
				if(StringUtils.isBlank(pns[j])){
					wp = warehouseProductDao.findUniqueBy("productNo", pns[j]);
					if(null != wp){
						param.put("error", "��"+ line + "�У���Ʒ���к�'" + pns[j] + "'֮ǰ����⣬���ʵ��" );
						return param;
					}
				}
				sim_param = new HashMap<String,String>();
				sim_param.put("cardNo", card_nos[j]);
				sim_param.put("iccid", iccids[j]);
				sim_param.put("imsi", imsis[j]);
				cs = cardSimDao.findUniqueSim(sim_param);
				if(null != cs){
					param.put("error", "��"+ line + "�У������֮ǰ����⣬���ʵ��" );
					sim_param = null;
					return param;
				}
			}
		}
